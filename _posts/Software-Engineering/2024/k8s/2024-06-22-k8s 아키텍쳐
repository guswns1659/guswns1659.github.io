// 스탭프 추가

k8s 아키텍쳐를 어떻게 구성할지 고민. 우선 콘텐츠 적어보기

- 선언적 구조
- Kubernetes has a "hub-and-spoke" API pattern. 내용.

Kubernetes의 "hub-and-spoke" API 패턴은 API 서버가 클러스터의 중심 허브 역할을 하며, 클러스터 내 모든 통신이 이 허브를 통해 이루어지는 구조를 의미합니다. 이 패턴은 중앙 집중화된 관리와 제어를 통해 시스템의 일관성을 유지하고, 효율적인 통신을 가능하게 합니다.

### 구성 요소와 역할

1. **API 서버 (Hub)**:
   - **중앙 허브**: 클러스터 내 모든 통신의 중심 역할을 합니다.
   - **통신 중개**: 클러스터 내 다른 모든 구성 요소들은 API 서버를 통해 서로 통신합니다. 직접적인 구성 요소 간의 통신은 이루어지지 않습니다.
   - **상태 관리**: 클러스터의 상태 정보를 관리하고, 이를 etcd에 저장합니다.

2. **기타 구성 요소 (Spokes)**:
   - **컨트롤러 매니저**: API 서버를 통해 클러스터의 상태를 감시하고 조정합니다.
   - **스케줄러**: API 서버를 통해 새로 생성된 Pod의 할당을 관리합니다.
   - **Kubelet**: 워커 노드에서 실행되며, API 서버와 통신하여 Pod을 실행하고 상태를 보고합니다.
   - **etcd**: 클러스터의 상태 데이터를 저장하는 분산 키-값 저장소로, API 서버와 gRPC를 통해 통신합니다.

### 특징

- **중앙 집중화**: 모든 요청과 명령이 API 서버를 통해 이루어지므로, 클러스터의 상태 관리와 제어가 중앙 집중화됩니다. 이는 시스템의 일관성을 유지하고, 관리의 편리성을 높입니다.
- **확장성**: 허브-앤-스포크 구조는 시스템의 확장성을 높입니다. 새로운 구성 요소가 추가되더라도, 이들은 API 서버와만 통신하면 되므로 전체 구조에 큰 영향을 주지 않습니다.
- **보안**: 중앙 허브를 통해 통신이 이루어지므로, 보안 정책과 인증/인가가 API 서버에서 일관되게 적용될 수 있습니다.

### 예시

- **Pod 생성 과정**:
  - 사용자가 `kubectl`을 통해 Pod 생성을 요청합니다.
  - API 서버는 이 요청을 받아들이고, etcd에 상태를 기록합니다.
  - 컨트롤러 매니저는 API 서버를 통해 새로운 Pod 생성을 인지하고, 이를 처리합니다.
  - 스케줄러는 API 서버를 통해 새로운 Pod을 적절한 워커 노드에 할당합니다.
  - Kubelet은 API 서버를 통해 할당된 Pod을 실행하고, 상태를 보고합니다.

### 참고 자료

- [Kubernetes Architecture](https://kubernetes.io/docs/concepts/architecture/)
- [Kubernetes API Concepts](https://kubernetes.io/docs/reference/using-api/api-concepts/)
- [Understanding Kubernetes Cluster Architecture](https://dzone.com/articles/understanding-kubernetes-cluster-architecture)

이러한 "hub-and-spoke" 패턴을 통해 Kubernetes는 중앙 집중화된 관리와 제어를 가능하게 하며, 시스템의 일관성과 효율성을 높입니다. API 서버가 모든 통신의 중심 허브 역할을 함으로써, 클러스터의 복잡성을 줄이고 관리의 용이성을 제공합니다.
