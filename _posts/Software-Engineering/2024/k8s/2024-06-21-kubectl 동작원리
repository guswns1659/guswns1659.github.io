---
title: 사용자의 명령을 받은 kubectl이 HTTP 요청을 만들어서 k8s API 서버에 호출하는 과정 
date: 2024-06-21 11:49:08 +09:00
categories: [Software-Engineering]
tags: engineering
---

# kubectl이 api server로 HTTP 요청을 어떻게 만드는지

`kubectl`이 Kubernetes API 서버와 통신하기 위해 HTTP 요청을 생성하는 과정은 다음과 같습니다:

1. **kubectl 명령 실행**:
   - 사용자가 터미널에서 `kubectl` 명령어를 실행합니다. 예를 들어, `kubectl apply -f pod.yaml` 명령을 실행합니다.

2. **API 서버와의 통신 설정**:
   - `kubectl`은 `~/.kube/config` 파일에서 API 서버의 주소와 인증 정보를 읽어옵니다. 이 파일에는 클러스터 정보, 사용자 인증 정보, 컨텍스트 등이 포함됩니다.

3. **HTTP 요청 생성**:
   - `kubectl`은 사용자가 입력한 명령을 바탕으로 HTTP(S) 요청을 생성합니다. 예를 들어, `kubectl apply -f pod.yaml` 명령은 YAML 파일을 읽고, API 서버에 `POST` 요청을 보냅니다.
   - 이 요청에는 필요한 인증 정보(예: 인증 토큰, 인증서 등)가 포함됩니다.

4. **API 서버로 요청 전송**:
   - 생성된 HTTP(S) 요청이 API 서버로 전송됩니다. 이 요청은 Kubernetes API 서버에서 지정된 리소스 경로에 도달합니다.

5. **API 서버의 요청 처리**:
   - API 서버는 요청을 수신하고, 요청의 유효성을 검사한 후, etcd에 데이터를 저장하거나 필요한 작업을 수행합니다.

6. **응답 반환**:
   - API 서버는 요청 처리 결과를 HTTP 응답으로 반환합니다. `kubectl`은 이 응답을 받아 사용자에게 출력합니다.

**예시**:
1. **kubectl 명령어**:
   ```bash
   kubectl apply -f pod.yaml
   ```

2. **~/.kube/config 파일 예시**:
   ```yaml
   apiVersion: v1
   clusters:
   - cluster:
       certificate-authority: /path/to/ca.crt
       server: https://example.com:6443
     name: my-cluster
   contexts:
   - context:
       cluster: my-cluster
       user: my-user
       namespace: default
     name: my-context
   current-context: my-context
   kind: Config
   preferences: {}
   users:
   - name: my-user
     user:
       client-certificate: /path/to/client.crt
       client-key: /path/to/client.key
   ```

3. **HTTP 요청 생성 및 전송**:
   - `kubectl`은 위 설정 파일을 사용하여 API 서버의 주소(`https://example.com:6443`)와 인증 정보를 가져와 HTTP 요청을 생성합니다.
   - `POST /api/v1/namespaces/default/pods`와 같은 요청을 생성하여 Pod를 생성하도록 API 서버에 보냅니다.

이러한 과정을 통해 `kubectl`이 HTTP 요청을 생성하고 API 서버와 통신하는 것을 알 수 있습니다. `kubectl`의 내부 코드는 Kubernetes의 `client-go` 라이브러리를 사용하여 HTTP 요청을 생성하고 처리합니다. 해당 코드는 Kubernetes의 GitHub 리포지토리에서 확인할 수 있습니다.
